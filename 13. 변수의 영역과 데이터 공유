#include<stdio.h>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<지역변수의 개념>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
int main(void) {
	int a = 20;
	int b = 10;
	printf("교환 전 a와 b의 값:%d, %d\n", a, b);

	{ // 블록 안에서만 쓸 수 있는 temp변수. 블록이 끝나면 temp 변수도 사라짐  == > 잘 활용하면 메모리 관리에 좋음.
		int temp= a;
		a = b;
		b = temp;
	}

	printf("교환 후 a와 b의 값:%d, %d\n", a, b);
}

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<일반 지역변수와 정적 지역변수의 차이>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
void auto_func(void);
void static_func(void);

int main(void) {
	int i;

	printf("auto 지역 변수를 사용한 함수 \n");
	for (i = 0; i < 3; i++) {
		auto_func();    
	}

	printf("static 지역 변수를 사용한 함수 \n");
	for (i = 0; i < 3; i++) {
		static_func();
	}

	return 0;
}

void auto_func(void) { // 일반 지역 변수를 사용하면 함수가 반환된 후에 변수 메모리가 삭제됨(지속적 계산이 불가능)
	auto a = 0;

	a++;
	printf("%d\n", a);

	return 0;
}

void static_func(void) { // 정적 지역 변수를 사용하면 함수가 반환된 후에도 변수 메모리가 유지됨(지속적 계산이 가능해짐)
	static a = 0;

	a++;
	printf("%d\n", a);

	return 0;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<           레지스터 변수            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
int main(void) {
	register int i;
	auto int sum = 0;

	for (i = 1; i <= 10000; i++) {
		sum += i;
	}
	printf("%d\n", sum);

	return 0;
}



-----------------------------------------------------------------------------------------------------


void func(void);
int a = 10;

int main(void) {
	func();
	a = 20;           // 같은 변수를 쓰고 있어도 마지막에 대입한 값이 출력됨. 지역 변수에 우선 순위가 있다.
	printf("%d", a);

	return 0;
}

void func(void) {
	a = 30;
}



-----------------------------------------------------------------------------------------------------








#include<stdio.h>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<지역변수의 개념>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
int main(void) {
	int a = 20;
	int b = 10;
	printf("교환 전 a와 b의 값:%d, %d\n", a, b);

	{ // 블록 안에서만 쓸 수 있는 temp변수. 블록이 끝나면 temp 변수도 사라짐  == > 잘 활용하면 메모리 관리에 좋음.
		int temp= a;
		a = b;
		b = temp;
	}

	printf("교환 후 a와 b의 값:%d, %d\n", a, b);
}

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<일반 지역변수와 정적 지역변수의 차이>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
void auto_func(void);
void static_func(void);

int main(void) {
	int i;

	printf("auto 지역 변수를 사용한 함수 \n");
	for (i = 0; i < 3; i++) {
		auto_func();    
	}

	printf("static 지역 변수를 사용한 함수 \n");
	for (i = 0; i < 3; i++) {
		static_func();
	}

	return 0;
}

void auto_func(void) { // 일반 지역 변수를 사용하면 함수가 반환된 후에 변수 메모리가 삭제됨(지속적 계산이 불가능)
	auto a = 0;

	a++;
	printf("%d\n", a);

	return 0;
}

void static_func(void) { // 정적 지역 변수를 사용하면 함수가 반환된 후에도 변수 메모리가 유지됨(지속적 계산이 가능해짐)
	static a = 0;

	a++;
	printf("%d\n", a);

	return 0;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<           레지스터 변수            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
int main(void) {
	register int i;
	auto int sum = 0;

	for (i = 1; i <= 10000; i++) {
		sum += i;
	}
	printf("%d\n", sum);

	return 0;
}



-----------------------------------------------------------------------------------------------------


void func(void);
int a = 10;

int main(void) {
	func();
	a = 20;           // 같은 변수를 쓰고 있어도 마지막에 대입한 값이 출력됨. 지역 변수에 우선 순위가 있다.
	printf("%d", a);

	return 0;
}

void func(void) {
	a = 30;
}



-----------------------------------------------------------------------------------------------------

// 전역변수 배열과 지역변수 개념을 이용해 배열의 요소 전부 합해주는 함수 제작

double get_next(void);
double ary[] = { 0.1,0.3,0.5,0.7,0.9 };

int main(void) {
	double res = 0;
	int i;

	for (i = 0; i < 5; i++) {
		res += get_next();
	}
	printf("%.1lf", res);

	return 0;
}

double get_next(void) {
	static int j = 0;
	double k = ary[j];
	j++;

	return k;
}

===========================================================================================================
<13.2> 함수끼리의 데이터 공유


// 제 2형식 - 주소 전달하기 방식으로 데이터 공유
void add_by_pointer(int* pa, int* pb, int* pr) {
	*pr = *pa + *pb;
}

int main(void) {
	
	int a = 10, b = 20, res = 0;

	add_by_pointer(&a, &b, &res);
	printf("%d", res);

	return 0;
}




// 제 3형식 - 주소를 반환하는 형식으로 데이터 공유

int* quot(int pa,int pb, int* pr);

int main(void) {
	int a, b, res;
	printf("두 정수 입력:");
	scanf_s("%d%d", &a, &b);

	if (quot(a, b, &res) == -1) {
		printf("0으로 나눌 수 없습니다!");
	}
	else {
		printf("%d를 %d로 나눈 몫은 %d입니다.", a, b, res);
	}

	return 0;
}

int* quot(int pa, int pb, int* pr) {
	if (pb == 0) {
		*pr = -1;
	}
	else {
		*pr = pa % pb;
	}

	return *pr;
}

================================================================================================================
<도전 실전 예제>

// 1. 전역 변수 교환 프로그램 - 두개 전역변수 입력 후, 교환하고 출력.

void input_data(int* pa, int* pb);
void swap_data(void);
void print_data(int a, int b);

int a, b;

int main(void) {
	input_data(&a, &b);
	swap_data();
	print_data(a, b);

	return 0;
}

void input_data(int* pa, int* pb) {
	printf("두 정수 입력:");
	scanf_s("%d %d", pa, pb);
}

void swap_data(void) {
	int temp = a;
	a = b;
	b = temp;
}

void print_data(int a, int b) { // 전역변수가 아닌 새로운 지역변수임, 하지만 전역변수 a 값이 지역변수 a값에 들어간건 맞음
	printf("두 정수 출력:%d %d", a, b);
}


// 2. 시계 프로그램 - 최초로 받은 시간에서 일정 시간 흐른 후 현재 시간 출력하는 프로그램. AM,PM 구별해야함.

void set(int h, int m);
void show(void);
void move(void);

int h, m, res,plus;

int main(void) {
	
	printf("최초 시간과 분 입력(24시간):");
	scanf_s("%d %d", &h, &m);
	set(h, m);
	show();
	move();


	return 0;
}

void set(int h, int m) {
	if ((12 < h) && (h < 24)) {
		res = 1; // PM
	}
	else {
		res = 0; // AM
	}
}
void show(void) { // 설정된 시간 출력 및 경과 시간 입력
	if (res == 1) {
		printf("설정된 시간:%d:%d(PM)\n", h - 12, m);
	}
	else {
		printf("설정된 시간:%d:%d(AM)\n", h, m);
	}
	printf("경과 시간 입력:");
	scanf_s("%d", &plus);
}
void move(void) { // 현재시간 출력
	m = m + plus;
	if (m > 60) {
		m = m - 60;
		h++;
	}


	if ((12 < h) && (h < 24)) {
		res = 1; // PM
		h = h - 12;
		
	}
	else if (h == 12) {
		res = 1;
	}
	else if (h == 24) {
		res = 0;
		h = h - 24;
	}
	else {
		res = 0; // AM
	}


	if (res == 1) {
		printf("현재 시간:%d:%d(PM)\n", h, m);
	}
	else {
		printf("현재 시간:%d:%d(AM)\n", h, m);
	}
	
}

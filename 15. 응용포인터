<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<        15.1 2중 포인터, 배열 포인터           >>>>>>>>>>>>>>>>>>>>




// 배열 포인터를 2차원 배열처럼 사용하는 연습 

int main(void) {
	int ary[3][4] = {
		{1,2,3,4},
		{5,6,7,8},
		{9,10,11,12}
	};
	int(*pa)[4];        // int형 변수 4개의 배열을 가리키는 배열 포인터. (1차원 배열 자체를 가리킴) - 포인터 배열과 다르다.
	int i, j;

	pa = ary;
	for (i = 0; i < 3; i++) {
		for (j = 0; j < 4; j++) {
			printf("%5d", pa[i][j]);    // pa를 2차원 배열처럼 사용 가능
		}
		printf("\n");
	}

	return 0;
}



//연습문제 4번 - 초기화된 2개의 2차원배열에서 같은 위치에 같은 값이 있는 경우 그 수를 세어 출력. 배열의 행,열 위치도 출력.

#include<stdio.h>
int count_num(int (*pa)[4], int(*pb)[4], int(*pt)[2]);

int main(void) {

	int ary1[3][4] = {
		{15,3,9,11},
		{23,7,10,12},
		{0,17,55,24}
	};
	int ary2[3][4] = {
		{13,8,9,15},
		{23,0,10,11},
		{29,17,43,3}
	};
	int same_num[12][2];
	int i, cnt;

	cnt = count_num(ary1, ary2, same_num);
	printf("일치하는 번호의 수:%d\n", cnt);
	printf("배열에서의 위치(행,열):...\n");
	for (i = 0; i < cnt; i++) {
		printf("(%d, %d)\n", same_num[i][0], same_num[i][1]);
	}

	return 0;
}

int count_num(int (*pa)[4], int (*pb)[4], int (*pt)[2]) { // int형 요소 4개를 받을 수 있는 배열포인터 선언(2차원 배열 받을 때 사용)
	int cnt=0;
	int i,j;

	for (i = 0; i < 3; i++) {
		for (j = 0; j < 4; j++) {
			if (pa[i][j] == pb[i][j]) {
				pt[cnt][0] = i;
				pt[cnt][1] = j;
				cnt += 1;
			}
		}
	}

	return cnt;
}




// 연습문제 5 - 5개 문자열 받아서 입출력함수에서 처리 후 출력하는 프로그램

#include<stdio.h>
void input_chr(char(*pary)[79]);
void output_chr(char(*pbry)[79]);

int main(void) {

	char ary[5][79];
	printf("다섯 개의 문장을 입력하시오.\n");
	input_chr(ary);
	out_put(ary);

	return 0;
}

void input_chr(char(*pary)[79]) {
	for (int i = 0; i < 5; i++) {
		scanf_s("%s", pary[i][79]);
	}
}

void output_chr(char(*pbry)[79]) {
	printf("\n입력한 문장은...\n");
	for (int i = 0; i < 5; i++) {
		printf("%s", pbry[i][79]);
	}
} 
// 수정 필요 !

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    15.2 포인터 함수    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


// 포인터 함수를 쓰는 대표적 예시 - 비슷한 연산을 하는 함수 여러개를 사용할 때(c++로 치면 클래스 느낌!)

void func(int (*fp)(int, int));
int sum(int a, int b);
int mul(int a, int b);
int max(int a, int b);

int main(void) {
	int sel;  //입력받은 '선택된 작업 메뉴 번호' 저장

	printf("1. 두 정수의 합\n");
	printf("2. 두 정수의 곱\n");
	printf("3. 두 정수중 큰 수 출력\n");
	printf("원하는 작업 선택:");

	scanf_s("%d", &sel);

	switch (sel) {
	case 1: func(sum); break;
	case 2: func(mul); break;
	case 3: func(max); break;
	}
	return 0;
}

void func(int (*fp)(int, int)) {
	int a, b;
	int res;

	printf("두 정수값을 입력하세요: ");
	scanf_s("%d %d", &a, &b);
	res = fp(a, b);     // fp에서 받은 함수의 주소로 전달 후 연산된 값을 res에 저장,
	printf("결과값은 :%d\n", res);
}

int sum(int a, int b) {
	return (a + b);
}

int mul(int a, int b) {
	return (a * b);
}

int max(int a, int b) {
	if (a > b) {
		return a;
	}
	else {
		return b;
	}
}

// 연습문제 5번 - exchange 함수와 func(포인터 함수)를 만들어 받은 인수 값을 출력하고 두 값을 바꾼 후에 다시 출력하도록 하는 프로그램.

void exchange(double*, double*);
void func(void (*fp)(double*, double*), double, double);

int main(void) {
	double a = 10, b = 20;

	func(exchange, a, b);

	return 0;
}

void exchange(double* pa, double* pb) {
	double pt;
	pt = *pa; // 아예 해당 주소의 값을 바꿔버려야 함.              =====>    주소를 바꾸는건 왜 안됨?
	*pa = *pb;
	*pb = pt;
}

void func(void (*fp)(double*, double*), double a, double b) {  // 함수 정의할때만 매개변수에 받을 변수 추가해주면 됨.
	double f = a, s = b;
	printf("a: %.1lf b: %.1lf\n", f, s);
	fp(&f,&s); // 각 실수의 주소를 보내야 함.
	printf("a: %.1lf b: %.1lf", f, s);
}
